# CONDUCT MEDIATION ANALYSIS
str(data)
summary(data)
table(data$Gender, data$Termination)
# Mediator model
med.model <- lm(CustomerSatisfaction ~ NumberofClaims + GenderNumeric + AgeGroupNumeric + IncomeLevel + PolicyDuration, data = data)
# Outcome model
out.model <- glm(TerminationBinary ~ CustomerSatisfaction + NumberofClaims + GenderNumeric + AgeGroupNumeric + IncomeLevel + PolicyDuration, family = "binomial", data = data)
med.out <- mediate(med.model, out.model, treat = "NumberofClaims", mediator = "CustomerSatisfaction", robustSE = TRUE, sims = 500)
summary(med.out)
# ADVANCED MEDIATION MODELS
# Setting up the model with multiple mediators
model <- '
# Mediation paths
CustomerSatisfaction ~ b1*NumberofClaims
IncomeLevel ~ b2*NumberofClaims
TerminationBinary ~ c1*CustomerSatisfaction + c2*IncomeLevel + c3*NumberofClaims
# Indirect effects
CustomerSatisfactionMediation := b1 * c1
IncomeLevelMediation := b2 * c2
# Total effect
TotalEffect := b1 * c1 + b2 * c2 + c3
'
fit <- sem(model, data = data, missing = "ML", estimator = "MLR", fixed.x = FALSE)
summary(fit, standardized = TRUE, fit.measures = TRUE)
# MEDIATION IN THE PRESENCE OF MODERATION
model_modmed <- '
# Moderated mediation paths
CustomerSatisfaction ~ b1*NumberofClaims + b3*GenderNumeric + b4*(NumberofClaims*GenderNumeric)
IncomeLevel ~ b2*NumberofClaims + b5*GenderNumeric + b6*(NumberofClaims*GenderNumeric)
TerminationBinary ~ c1*CustomerSatisfaction + c2*IncomeLevel + c3*NumberofClaims + c4*GenderNumeric
'
fit_modmed <- sem(model_modmed, data = data, missing = "ML", estimator = "MLR", fixed.x = FALSE)
install.packages("mediation")
install.packages("lavaan")
library(mediation)
library(lavaan)
# PREP DATA
set.seed(123) # For reproducibility
n <- 1000 # Number of observations
# Creating synthetic data
data <- data.frame(
Gender = factor(sample(c("Male", "Female"), n, replace = TRUE)),
AgeGroup = factor(sample(c("Under 30", "30-60", "Over 60"), n, replace = TRUE, prob = c(0.2, 0.5, 0.3))),
IncomeLevel = sample(20000:100000, n, replace = TRUE),
PolicyDuration = sample(1:30, n, replace = TRUE),
NumberofClaims = rpois(n, lambda = 2),
CustomerSatisfaction = sample(1:10, n, replace = TRUE),
Termination = factor(sample(c("Yes", "No"), n, replace = TRUE, prob = c(0.3, 0.7)))
)
# Adding binary column for Termination
data$TerminationBinary <- ifelse(data$Termination == "Yes", 1, 0)
# Converting unordered factors to numeric
data$GenderNumeric <- as.numeric(data$Gender)
data$AgeGroupNumeric <- as.numeric(data$AgeGroup)
# CONDUCT MEDIATION ANALYSIS
str(data)
summary(data)
table(data$Gender, data$Termination)
# Mediator model
med.model <- lm(CustomerSatisfaction ~ NumberofClaims + GenderNumeric + AgeGroupNumeric + IncomeLevel + PolicyDuration, data = data)
# Outcome model
out.model <- glm(TerminationBinary ~ CustomerSatisfaction + NumberofClaims + GenderNumeric + AgeGroupNumeric + IncomeLevel + PolicyDuration, family = "binomial", data = data)
med.out <- mediate(med.model, out.model, treat = "NumberofClaims", mediator = "CustomerSatisfaction", robustSE = TRUE, sims = 500)
summary(med.out)
# ADVANCED MEDIATION MODELS
# Setting up the model with multiple mediators
model <- '
# Mediation paths
CustomerSatisfaction ~ b1*NumberofClaims
IncomeLevel ~ b2*NumberofClaims
TerminationBinary ~ c1*CustomerSatisfaction + c2*IncomeLevel + c3*NumberofClaims
# Indirect effects
CustomerSatisfactionMediation := b1 * c1
IncomeLevelMediation := b2 * c2
# Total effect
TotalEffect := b1 * c1 + b2 * c2 + c3
'
fit <- sem(model, data = data, missing = "ML", estimator = "MLR", fixed.x = FALSE)
summary(fit, standardized = TRUE, fit.measures = TRUE)
# MEDIATION IN THE PRESENCE OF MODERATION
model_modmed <- '
# Moderated mediation paths
CustomerSatisfaction ~ b1*NumberofClaims + b3*GenderNumeric + b4*NumberofClaims:GenderNumeric
IncomeLevel ~ b2*NumberofClaims + b5*GenderNumeric + b6*NumberofClaims:GenderNumeric
TerminationBinary ~ c1*CustomerSatisfaction + c2*IncomeLevel + c3*NumberofClaims + c4*GenderNumeric
'
fit_modmed <- sem(model_modmed, data = data, missing = "ML", estimator = "MLR", fixed.x = FALSE)
summary(fit_modmed, standardized = TRUE, fit.measures = TRUE)
# LONGITUDINAL MEDIATION ANALYSIS
# Extending the dataset for a longitudinal perspective
data$Year <- rep(1:5, each = n/5)
# Building a simple longitudinal mediation model for demonstration
# Assuming CustomerSatisfaction as the mediator for Year 1 impact on TerminationBinary in Year 5
model_long <- '
TerminationBinary ~ a*CustomerSatisfaction + b*NumberofClaims + c*Year
CustomerSatisfaction ~ d*NumberofClaims + e*Year
'
fit_long <- growth(model_long, data = data, estimator = "MLR")
summary(fit_long, standardized = TRUE, fit.measures = TRUE)
install.packages("lavaan")
install.packages("lavaan")
# Install necessary packages if you haven't already
install.packages("MatchIt")
install.packages("dplyr")
install.packages("ggplot2")
# Load the libraries
library(MatchIt)
library(dplyr)
library(ggplot2)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
data <- read.csv(file = "./data/ecls.csv")
data
# Remove the any columns to anonymize the data
data_anonymized <- data[, !(names(data) %in% c("childid"))]
# Summary statistics for numeric columns
summary_statistics <- data_anonymized %>%
reframe(across(where(is.numeric), ~ list(mean = mean(.x, na.rm = TRUE),
sd = sd(.x, na.rm = TRUE),
min = min(.x, na.rm = TRUE),
max = max(.x, na.rm = TRUE))))
summary_statistics
# Counts  'catholic' columns
catholic_counts <- table(data_anonymized$catholic)
catholic_counts
# Histograms for numeric variables: Age of mother and father, household income, and child's math score
par(mfrow = c(2, 2))
# Mother's age distribution
ggplot(data_anonymized, aes(x = p5hmage)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(title = "Distribution of Mother's Age", x = "Mother's Age", y = "Frequency") +
theme_minimal()
# Father's age distribution
ggplot(data_anonymized, aes(x = p5hdage)) +
geom_histogram(binwidth = 1, fill = "gold", color = "black") +
labs(title = "Distribution of Father's Age", x = "Father's Age", y = "Frequency") +
theme_minimal()
# Household income distribution
ggplot(data_anonymized, aes(x = w3income)) +
geom_histogram(fill = "lightgreen", color = "black") +
labs(title = "Distribution of Household Income", x = "Household Income", y = "Frequency") +
theme_minimal()
# Child's math score distribution
ggplot(data_anonymized, aes(x = c5r2mtsc)) +
geom_histogram(fill = "salmon", color = "black") +
labs(title = "Distribution of Child's Math Score", x = "Math Score", y = "Frequency") +
theme_minimal()
# Race distribution
ggplot(data_anonymized, aes(x = race)) +
geom_bar(fill = "lightblue") +
labs(title = "Distribution of Race", x = "Race", y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Catholic distribution
ggplot(data_anonymized, aes(x = factor(catholic))) +
geom_bar(fill = "lightcoral") +
labs(title = "Distribution of Catholic", x = "Catholic (0 = No, 1 = Yes)", y = "Count") +
theme_minimal()
# View the first few rows of the anonymized dataframe
head(data_anonymized)
data_anonymized %>%
group_by(catholic) %>%
summarise(n_students = n(),
mean_math = mean(c5r2mtsc_std, na.rm = TRUE),
std_error = sd(c5r2mtsc_std, na.rm = TRUE) / sqrt(n_students))
pre_treatment_covariates <- c('w3income', 'p5numpla', 'w3momed_hsb')
data_anonymized %>%
group_by(catholic) %>%
summarise_at(vars(one_of(pre_treatment_covariates)), ~mean(.x, na.rm = TRUE))
# build the model and update prop score
model_ps <- glm(catholic ~ race_white + w3income + p5numpla + w3momed_hsb, family = binomial(), data = data_anonymized)
data_anonymized$pscore <- predict(model_ps, newdata = data_anonymized, type = "response")
#plot the results as a histogram
ggplot(data_anonymized, aes(x = pscore, fill = as.factor(catholic))) +
geom_histogram(alpha = 0.6, position = "identity", bins = 30) +
labs(x = "Propensity Score", y = "Frequency", fill = "Group") +
theme_minimal()
# Remove rows with any NA values in the specified covariates
data_cleaned <- data_anonymized %>%
filter(complete.cases(catholic, race_white, w3income, p5numpla, w3momed_hsb))
# Further remove rows with non-finite values in numeric covariates
numeric_covariates <- c( "w3income", "p5numpla")
data_cleaned <- data_cleaned %>%
filter(sapply(data_cleaned[numeric_covariates], is.finite) %>% rowSums() == length(numeric_covariates))
# run matchit() on data_cleaned
mod_match <- matchit(catholic ~ race_white + w3income + p5numpla + w3momed_hsb,
method = "nearest", data = data_cleaned) # or data_imputed
# Using the MatchIt package for visualization
plot(mod_match, type = "jitter")
plot(mod_match, type = "hist")
matched_data <- match.data(mod_match)
matched_data %>%
group_by(catholic) %>%
summarise_at(vars(one_of(pre_treatment_covariates)), ~mean(.x, na.rm = TRUE))
with(matched_data, t.test(c5r2mtsc_std ~ catholic))
# You can also use a linear model for a more detailed analysis
lm_effect <- lm(c5r2mtsc_std ~ catholic, data = matched_data)
summary(lm_effect)
install.packages("ggplot2")
install.packages("dplyr")
pre_treatment_covariates <- c('w3income', 'p5numpla', 'w3momed_hsb')
data_anonymized %>%
group_by(catholic) %>%
summarise_at(vars(one_of(pre_treatment_covariates)), ~mean(.x, na.rm = TRUE))
pre_treatment_covariates <- c('w3income', 'p5numpla', 'w3momed_hsb')
data_anonymized %>%
group_by(catholic) %>%
summarise_at(vars(one_of(pre_treatment_covariates)), ~mean(.x, na.rm = TRUE))
#plot the results as a histogram
ggplot(data_anonymized, aes(x = pscore, fill = as.factor(catholic))) +
geom_histogram(alpha = 0.6, position = "identity", bins = 30) +
labs(x = "Propensity Score", y = "Frequency", fill = "Group") +
theme_minimal()
install.packages("dplyr")
pre_treatment_covariates <- c('w3income', 'p5numpla', 'w3momed_hsb')
data_anonymized %>%
group_by(catholic) %>%
summarise_at(vars(one_of(pre_treatment_covariates)), ~mean(.x, na.rm = TRUE))
# Install necessary packages if you haven't already
install.packages("MatchIt")
install.packages("dplyr")
install.packages("ggplot2")
# Load the libraries
library(MatchIt)
library(dplyr)
library(ggplot2)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
data <- read.csv(file = "./data/ecls.csv")
data
# Remove the any columns to anonymize the data
data_anonymized <- data[, !(names(data) %in% c("childid"))]
# Summary statistics for numeric columns
summary_statistics <- data_anonymized %>%
reframe(across(where(is.numeric), ~ list(mean = mean(.x, na.rm = TRUE),
sd = sd(.x, na.rm = TRUE),
min = min(.x, na.rm = TRUE),
max = max(.x, na.rm = TRUE))))
summary_statistics
# Counts  'catholic' columns
catholic_counts <- table(data_anonymized$catholic)
catholic_counts
# Histograms for numeric variables: Age of mother and father, household income, and child's math score
par(mfrow = c(2, 2))
# Mother's age distribution
ggplot(data_anonymized, aes(x = p5hmage)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(title = "Distribution of Mother's Age", x = "Mother's Age", y = "Frequency") +
theme_minimal()
# Father's age distribution
ggplot(data_anonymized, aes(x = p5hdage)) +
geom_histogram(binwidth = 1, fill = "gold", color = "black") +
labs(title = "Distribution of Father's Age", x = "Father's Age", y = "Frequency") +
theme_minimal()
# Household income distribution
ggplot(data_anonymized, aes(x = w3income)) +
geom_histogram(fill = "lightgreen", color = "black") +
labs(title = "Distribution of Household Income", x = "Household Income", y = "Frequency") +
theme_minimal()
# Child's math score distribution
ggplot(data_anonymized, aes(x = c5r2mtsc)) +
geom_histogram(fill = "salmon", color = "black") +
labs(title = "Distribution of Child's Math Score", x = "Math Score", y = "Frequency") +
theme_minimal()
# Race distribution
ggplot(data_anonymized, aes(x = race)) +
geom_bar(fill = "lightblue") +
labs(title = "Distribution of Race", x = "Race", y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Catholic distribution
ggplot(data_anonymized, aes(x = factor(catholic))) +
geom_bar(fill = "lightcoral") +
labs(title = "Distribution of Catholic", x = "Catholic (0 = No, 1 = Yes)", y = "Count") +
theme_minimal()
# View the first few rows of the anonymized dataframe
head(data_anonymized)
data_anonymized %>%
group_by(catholic) %>%
summarise(n_students = n(),
mean_math = mean(c5r2mtsc_std, na.rm = TRUE),
std_error = sd(c5r2mtsc_std, na.rm = TRUE) / sqrt(n_students))
pre_treatment_covariates <- c('w3income', 'p5numpla', 'w3momed_hsb')
data_anonymized %>%
group_by(catholic) %>%
summarise_at(vars(one_of(pre_treatment_covariates)), ~mean(.x, na.rm = TRUE))
# build the model and update prop score
model_ps <- glm(catholic ~  w3income + p5numpla + w3momed_hsb, family = binomial(), data = data_anonymized)
data_anonymized$pscore <- predict(model_ps, newdata = data_anonymized, type = "response")
#plot the results as a histogram
ggplot(data_anonymized, aes(x = pscore, fill = as.factor(catholic))) +
geom_histogram(alpha = 0.6, position = "identity", bins = 30) +
labs(x = "Propensity Score", y = "Frequency", fill = "Group") +
theme_minimal()
# Remove rows with any NA values in the specified covariates
data_cleaned <- data_anonymized %>%
filter(complete.cases(catholic, race_white, w3income, p5numpla, w3momed_hsb))
# Further remove rows with non-finite values in numeric covariates
numeric_covariates <- c( "w3income", "p5numpla")
data_cleaned <- data_cleaned %>%
filter(sapply(data_cleaned[numeric_covariates], is.finite) %>% rowSums() == length(numeric_covariates))
# run matchit() on data_cleaned
mod_match <- matchit(catholic ~ race_white + w3income + p5numpla + w3momed_hsb,
method = "nearest", data = data_cleaned) # or data_imputed
# Using the MatchIt package for visualization
plot(mod_match, type = "jitter")
plot(mod_match, type = "hist")
matched_data <- match.data(mod_match)
matched_data %>%
group_by(catholic) %>%
summarise_at(vars(one_of(pre_treatment_covariates)), ~mean(.x, na.rm = TRUE))
with(matched_data, t.test(c5r2mtsc_std ~ catholic))
# You can also use a linear model for a more detailed analysis
lm_effect <- lm(c5r2mtsc_std ~ catholic, data = matched_data)
summary(lm_effect)
install.packages("dplyr")
install.packages("ggplot2")
install.packages("MatchIt")
install.packages("MatchIt")
install.packages("ggplot2")
# Install necessary packages if you haven't already
install.packages("MatchIt")
install.packages("dplyr")
install.packages("ggplot2")
# Load the libraries
library(MatchIt)
library(dplyr)
library(ggplot2)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
data <- read.csv(file = "./data/ecls.csv")
data
# Remove the any columns to anonymize the data
data_anonymized <- data[, !(names(data) %in% c("childid"))]
# Summary statistics for numeric columns
summary_statistics <- data_anonymized %>%
reframe(across(where(is.numeric), ~ list(mean = mean(.x, na.rm = TRUE),
sd = sd(.x, na.rm = TRUE),
min = min(.x, na.rm = TRUE),
max = max(.x, na.rm = TRUE))))
summary_statistics
# Counts  'catholic' columns
catholic_counts <- table(data_anonymized$catholic)
catholic_counts
# Histograms for numeric variables: Age of mother and father, household income, and child's math score
par(mfrow = c(2, 2))
# Mother's age distribution
ggplot(data_anonymized, aes(x = p5hmage)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(title = "Distribution of Mother's Age", x = "Mother's Age", y = "Frequency") +
theme_minimal()
# Father's age distribution
ggplot(data_anonymized, aes(x = p5hdage)) +
geom_histogram(binwidth = 1, fill = "gold", color = "black") +
labs(title = "Distribution of Father's Age", x = "Father's Age", y = "Frequency") +
theme_minimal()
# Household income distribution
ggplot(data_anonymized, aes(x = w3income)) +
geom_histogram(fill = "lightgreen", color = "black") +
labs(title = "Distribution of Household Income", x = "Household Income", y = "Frequency") +
theme_minimal()
# Child's math score distribution
ggplot(data_anonymized, aes(x = c5r2mtsc)) +
geom_histogram(fill = "salmon", color = "black") +
labs(title = "Distribution of Child's Math Score", x = "Math Score", y = "Frequency") +
theme_minimal()
# Catholic distribution
ggplot(data_anonymized, aes(x = factor(catholic))) +
geom_bar(fill = "lightcoral") +
labs(title = "Distribution of Catholic", x = "Catholic (0 = No, 1 = Yes)", y = "Count") +
theme_minimal()
# View the first few rows of the anonymized dataframe
head(data_anonymized)
data_anonymized %>%
group_by(catholic) %>%
summarise(n_students = n(),
mean_math = mean(c5r2mtsc_std, na.rm = TRUE),
std_error = sd(c5r2mtsc_std, na.rm = TRUE) / sqrt(n_students))
pre_treatment_covariates <- c('w3income', 'p5numpla', 'w3momed_hsb')
data_anonymized %>%
group_by(catholic) %>%
summarise_at(vars(one_of(pre_treatment_covariates)), ~mean(.x, na.rm = TRUE))
# build the model and update prop score
model_ps <- glm(catholic ~  w3income + p5numpla + w3momed_hsb, family = binomial(), data = data_anonymized)
data_anonymized$pscore <- predict(model_ps, newdata = data_anonymized, type = "response")
#plot the results as a histogram
ggplot(data_anonymized, aes(x = pscore, fill = as.factor(catholic))) +
geom_histogram(alpha = 0.6, position = "identity", bins = 30) +
labs(x = "Propensity Score", y = "Frequency", fill = "Group") +
theme_minimal()
# Remove rows with any NA values in the specified covariates
data_cleaned <- data_anonymized %>%
filter(complete.cases(catholic, race_white, w3income, p5numpla, w3momed_hsb))
# Further remove rows with non-finite values in numeric covariates
numeric_covariates <- c( "w3income", "p5numpla")
data_cleaned <- data_cleaned %>%
filter(sapply(data_cleaned[numeric_covariates], is.finite) %>% rowSums() == length(numeric_covariates))
# run matchit() on data_cleaned
mod_match <- matchit(catholic ~ w3income + p5numpla + w3momed_hsb,
method = "nearest", data = data_cleaned) # or data_imputed
# Using the MatchIt package for visualization
plot(mod_match, type = "jitter")
plot(mod_match, type = "hist")
matched_data <- match.data(mod_match)
matched_data %>%
group_by(catholic) %>%
summarise_at(vars(one_of(pre_treatment_covariates)), ~mean(.x, na.rm = TRUE))
with(matched_data, t.test(c5r2mtsc_std ~ catholic))
# You can also use a linear model for a more detailed analysis
lm_effect <- lm(c5r2mtsc_std ~ catholic, data = matched_data)
summary(lm_effect)
install.packages("dplyr")
install.packages("ggplot2")
install.packages("MatchIt")
install.packages("MatchIt")
install.packages("ggplot2")
library(pcalg)
library(bnlearn)
library(causaleffect)
library(igraph)
# Create a complex dataset
set.seed(400)
n <- 1000
data <- data.frame(
age = sample(18:60, n, replace = TRUE),
education = sample(0:5, n, replace = TRUE),  # 0: No education, 1: Primary, 2: Secondary, 3: High school, 4: University, 5: Postgraduate
employed = sample(c(0,1), n, replace = TRUE, prob = c(0.3, 0.7)),  # 0: Unemployed, 1: Employed
income = round(rlnorm(n, meanlog = 7, sdlog = 1)),  # Monthly income in thousands of Colombian Pesos
dependents = sample(0:5, n, replace = TRUE, prob = c(0.2, 0.3, 0.2, 0.15, 0.1, 0.05)),
domestic_violence = sample(c(0,1), n, replace = TRUE, prob = c(0.7, 0.3)),  # 0: No history, 1: History of domestic violence
region = sample(c("Urban", "Rural"), n, replace = TRUE, prob = c(0.6, 0.4)),
organized_crime = sample(1:5, n, replace = TRUE),  # Scale of 1-5, 5 being highest presence
local_unemployment = round(runif(n, 5, 25), 1),  # Percentage
social_services = sample(1:5, n, replace = TRUE)  # Scale of 1-5, 5 being highest access
)
# Calculate probability of involvement based on the factors
prob_involvement <- with(data,
(age - 30)^2 / 1000 -
0.1 * education +
0.2 * (1 - employed) +
(7000 - income) / 10000 +
0.05 * dependents +
0.2 * domestic_violence +
0.1 * (region == "Rural") +
0.1 * organized_crime +
0.01 * local_unemployment -
0.1 * social_services
)
# Normalize probabilities
prob_involvement <- (prob_involvement - min(prob_involvement)) / (max(prob_involvement) - min(prob_involvement))
# Assign involvement status
data$involved <- rbinom(n, 1, prob_involvement)
# Convert categorical variables to numeric
data$region <- as.numeric(factor(data$region))
# Perform causal discovery
suffStat <- list(C = cor(data), n = n)
pc.fit <- pc(suffStat, indepTest = gaussCItest, p = ncol(data), alpha = 0.05)
# Plot the result
plot_graph <- function(g) {
# Convert pcalg graph to igraph object
ig <- igraph::graph_from_graphnel(g)
# Create a named vector for node labels
node_labels <- c("Age", "Education", "Employed", "Income", "Dependents",
"Domestic Violence", "Region", "Organized Crime",
"Local Unemployment", "Social Services", "Involved")
names(node_labels) <- V(ig)$name
# Set layout
layout <- layout_with_fr(ig)
# Set node and edge attributes
V(ig)$color <- rainbow(length(V(ig)))
V(ig)$size <- 30
V(ig)$label.color <- "black"
V(ig)$label.cex <- 0.8
E(ig)$arrow.size <- 0.3
# Plot the graph
plot(ig,
layout = layout,
vertex.label = node_labels[V(ig)$name],
edge.arrow.mode = ">",
main = "Causal Graph: Women's Involvement in Drug Trafficking",
sub = "Estimated by PC Algorithm",
margin = c(0,0,0,0))
}
# Call the function to plot the graph
plot_graph(pc.fit@graph)
# Print summary of the causal graph
summary(pc.fit)
plot_graph <- function(g) {
# Convert pcalg graph to igraph object
ig <- igraph::graph_from_graphnel(g)
# Create a named vector for node labels
node_labels <- c("Age", "Education", "Employed", "Income", "Dependents",
"Domestic Violence", "Region", "Organized Crime",
"Local Unemployment", "Social Services", "Involved")
names(node_labels) <- V(ig)$name
# Set layout
layout <- layout_with_fr(ig)
# Set node and edge attributes
V(ig)$color <- rainbow(length(V(ig)))
V(ig)$size <- 30
V(ig)$label.color <- "black"
V(ig)$label.cex <- 0.8
E(ig)$arrow.size <- 0.3
# Plot the graph
plot(ig,
layout = layout,
vertex.label = node_labels[V(ig)$name],
edge.arrow.mode = ">",
main = "Causal Graph: Women's Involvement in X Drug Trafficking",
sub = "Estimated by PC Algorithm",
margin = c(0,0,0,0))
}
# Call the function to plot the graph
plot_graph(pc.fit@graph)
