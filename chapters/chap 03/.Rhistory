print(primary_result)
# Generating synthetic data
set.seed(123) # For reproducibility
n <- 100 # Number of patients
treatment <- rep(c("A", "B"), each = n/2)
outcome <- c(rnorm(n/2, mean = 20, sd = 5), rnorm(n/2, mean = 18, sd = 5)) # Treatment A has a slightly higher effect
patient_id <- 1:n
data <- data.frame(patient_id, treatment, outcome)
# Introduce some missing data in the outcome
set.seed(234)
missing_indices <- sample(1:n, 20) # Randomly choose 20 outcomes to be missing
data$outcome[missing_indices] <- NA
complete_cases_data <- na.omit(data) # Remove missing data
# Perform t-test to compare treatments
primary_result <- t.test(outcome ~ treatment, data = complete_cases_data)
print(primary_result)
# Simple imputation with the mean of available outcomes
mean_outcome <- mean(data$outcome, na.rm = TRUE)
data$outcome[is.na(data$outcome)] <- mean_outcome
# Perform t-test after imputation
sensitivity_result <- t.test(outcome ~ treatment, data = data)
print(sensitivity_result)
# Install and load necessary packages
if (!requireNamespace("EValue", quietly = TRUE)) install.packages("EValue")
library(EValue)
# Set seed for reproducibility
set.seed(123)
# Number of observations
n <- 500
# Generate synthetic data
data <- data.frame(
comic_freq = sample(1:5, n, replace = TRUE), # 1: Rarely, 5: Very Frequently
parents_edu = sample(c('Low', 'Medium', 'High'), n, replace = TRUE, prob = c(0.3, 0.4, 0.3)),
homework_time = rnorm(n, mean = 2, sd = 0.5), # Hours per day
higher_studies = sample(c(0, 1), n, replace = TRUE) # 0: No, 1: Yes
)
# Fit a logistic regression model
model <- glm(higher_studies ~ comic_freq + parents_edu + homework_time,
data = data, family = binomial)
# Print model summary
summary(model)
# Extract odds ratio and confidence interval for comic_freq
or <- exp(coef(model)["comic_freq"])
ci <- exp(confint(model)["comic_freq",])
# Print odds ratio and confidence interval
cat("Odds Ratio for comic_freq:", or, "\n")
cat("95% Confidence Interval:", ci[1], "-", ci[2], "\n")
# Calculate the prevalence of the outcome
outcome_prevalence <- mean(data$higher_studies)
# Function to calculate E-value
calculate_evalue <- function(estimate) {
if (estimate < 1) estimate <- 1 / estimate
return(estimate + sqrt(estimate * (estimate - 1)))
}
# Calculate E-values
evalue_point <- calculate_evalue(or)
evalue_lower <- calculate_evalue(ci[1])
# Print E-values
cat("E-value (point estimate):", evalue_point, "\n")
cat("E-value (lower confidence limit):", evalue_lower, "\n")
# Create data for plotting
conf_strengths <- seq(1, max(evalue_point, evalue_lower) + 0.5, by = 0.1)
bias_factors <- sapply(conf_strengths, function(x) x + sqrt(x * (x-1)))
# Plot
plot(conf_strengths, bias_factors, type = "l",
xlab = "Confounder-Outcome Relative Risk",
ylab = "E-value",
main = "Sensitivity Analysis Plot")
abline(h = or, col = "red", lty = 2)
text(1, or, "Observed OR", pos = 3, col = "red")
abline(h = evalue_point, col = "blue", lty = 2)
text(1, evalue_point, "E-value (point estimate)", pos = 3, col = "blue")
abline(h = evalue_lower, col = "green", lty = 2)
text(1, evalue_lower, "E-value (lower CI)", pos = 3, col = "green")
# Install and load necessary packages
# if (!requireNamespace("EValue", quietly = TRUE)) install.packages("EValue")
# library(EValue)
# Set seed for reproducibility
set.seed(123)
# Number of observations
n <- 500
# Generate synthetic data
data <- data.frame(
comic_freq = sample(1:5, n, replace = TRUE), # 1: Rarely, 5: Very Frequently
parents_edu = sample(c('Low', 'Medium', 'High'), n, replace = TRUE, prob = c(0.3, 0.4, 0.3)),
homework_time = rnorm(n, mean = 2, sd = 0.5), # Hours per day
higher_studies = sample(c(0, 1), n, replace = TRUE) # 0: No, 1: Yes
)
# Fit a logistic regression model
model <- glm(higher_studies ~ comic_freq + parents_edu + homework_time,
data = data, family = binomial)
# Print model summary
summary(model)
# Extract odds ratio and confidence interval for comic_freq
or <- exp(coef(model)["comic_freq"])
ci <- exp(confint(model)["comic_freq",])
# Print odds ratio and confidence interval
cat("Odds Ratio for comic_freq:", or, "\n")
cat("95% Confidence Interval:", ci[1], "-", ci[2], "\n")
# Calculate the prevalence of the outcome
outcome_prevalence <- mean(data$higher_studies)
# Function to calculate E-value
calculate_evalue <- function(estimate) {
if (estimate < 1) estimate <- 1 / estimate
return(estimate + sqrt(estimate * (estimate - 1)))
}
# Calculate E-values
evalue_point <- calculate_evalue(or)
evalue_lower <- calculate_evalue(ci[1])
# Print E-values
cat("E-value (point estimate):", evalue_point, "\n")
cat("E-value (lower confidence limit):", evalue_lower, "\n")
# Create data for plotting
conf_strengths <- seq(1, max(evalue_point, evalue_lower) + 0.5, by = 0.1)
bias_factors <- sapply(conf_strengths, function(x) x + sqrt(x * (x-1)))
# Plot
plot(conf_strengths, bias_factors, type = "l",
xlab = "Confounder-Outcome Relative Risk",
ylab = "E-value",
main = "Sensitivity Analysis Plot")
abline(h = or, col = "red", lty = 2)
text(1, or, "Observed OR", pos = 3, col = "red")
abline(h = evalue_point, col = "blue", lty = 2)
text(1, evalue_point, "E-value (point estimate)", pos = 3, col = "blue")
abline(h = evalue_lower, col = "green", lty = 2)
text(1, evalue_lower, "E-value (lower CI)", pos = 3, col = "green")
install.packages("mediation")
install.packages("lavaan")
library(mediation)
library(lavaan)
# PREP DATA
set.seed(123) # For reproducibility
n <- 1000 # Number of observations
# Creating synthetic data
data <- data.frame(
Gender = factor(sample(c("Male", "Female"), n, replace = TRUE)),
AgeGroup = factor(sample(c("Under 30", "30-60", "Over 60"), n, replace = TRUE, prob = c(0.2, 0.5, 0.3))),
IncomeLevel = sample(20000:100000, n, replace = TRUE),
PolicyDuration = sample(1:30, n, replace = TRUE),
NumberofClaims = rpois(n, lambda = 2),
CustomerSatisfaction = sample(1:10, n, replace = TRUE),
Termination = factor(sample(c("Yes", "No"), n, replace = TRUE, prob = c(0.3, 0.7)))
)
# Adding binary column for Termination
data$TerminationBinary <- ifelse(data$Termination == "Yes", 1, 0)
# Converting unordered factors to numeric
data$GenderNumeric <- as.numeric(data$Gender)
data$AgeGroupNumeric <- as.numeric(data$AgeGroup)
# CONDUCT MEDIATION ANALYSIS
str(data)
summary(data)
table(data$Gender, data$Termination)
# Mediator model
med.model <- lm(CustomerSatisfaction ~ NumberofClaims + GenderNumeric + AgeGroupNumeric + IncomeLevel + PolicyDuration, data = data)
# Outcome model
out.model <- glm(TerminationBinary ~ CustomerSatisfaction + NumberofClaims + GenderNumeric + AgeGroupNumeric + IncomeLevel + PolicyDuration, family = "binomial", data = data)
med.out <- mediate(med.model, out.model, treat = "NumberofClaims", mediator = "CustomerSatisfaction", robustSE = TRUE, sims = 500)
summary(med.out)
# ADVANCED MEDIATION MODELS
# Setting up the model with multiple mediators
model <- '
# Mediation paths
CustomerSatisfaction ~ b1*NumberofClaims
IncomeLevel ~ b2*NumberofClaims
TerminationBinary ~ c1*CustomerSatisfaction + c2*IncomeLevel + c3*NumberofClaims
# Indirect effects
CustomerSatisfactionMediation := b1 * c1
IncomeLevelMediation := b2 * c2
# Total effect
TotalEffect := b1 * c1 + b2 * c2 + c3
'
fit <- sem(model, data = data, missing = "ML", estimator = "MLR", fixed.x = FALSE)
summary(fit, standardized = TRUE, fit.measures = TRUE)
# MEDIATION IN THE PRESENCE OF MODERATION
model_modmed <- '
# Moderated mediation paths
CustomerSatisfaction ~ b1*NumberofClaims + b3*GenderNumeric + b4*(NumberofClaims*GenderNumeric)
IncomeLevel ~ b2*NumberofClaims + b5*GenderNumeric + b6*(NumberofClaims*GenderNumeric)
TerminationBinary ~ c1*CustomerSatisfaction + c2*IncomeLevel + c3*NumberofClaims + c4*GenderNumeric
'
fit_modmed <- sem(model_modmed, data = data, missing = "ML", estimator = "MLR", fixed.x = FALSE)
install.packages("mediation")
install.packages("lavaan")
library(mediation)
library(lavaan)
# PREP DATA
set.seed(123) # For reproducibility
n <- 1000 # Number of observations
# Creating synthetic data
data <- data.frame(
Gender = factor(sample(c("Male", "Female"), n, replace = TRUE)),
AgeGroup = factor(sample(c("Under 30", "30-60", "Over 60"), n, replace = TRUE, prob = c(0.2, 0.5, 0.3))),
IncomeLevel = sample(20000:100000, n, replace = TRUE),
PolicyDuration = sample(1:30, n, replace = TRUE),
NumberofClaims = rpois(n, lambda = 2),
CustomerSatisfaction = sample(1:10, n, replace = TRUE),
Termination = factor(sample(c("Yes", "No"), n, replace = TRUE, prob = c(0.3, 0.7)))
)
# Adding binary column for Termination
data$TerminationBinary <- ifelse(data$Termination == "Yes", 1, 0)
# Converting unordered factors to numeric
data$GenderNumeric <- as.numeric(data$Gender)
data$AgeGroupNumeric <- as.numeric(data$AgeGroup)
# CONDUCT MEDIATION ANALYSIS
str(data)
summary(data)
table(data$Gender, data$Termination)
# Mediator model
med.model <- lm(CustomerSatisfaction ~ NumberofClaims + GenderNumeric + AgeGroupNumeric + IncomeLevel + PolicyDuration, data = data)
# Outcome model
out.model <- glm(TerminationBinary ~ CustomerSatisfaction + NumberofClaims + GenderNumeric + AgeGroupNumeric + IncomeLevel + PolicyDuration, family = "binomial", data = data)
med.out <- mediate(med.model, out.model, treat = "NumberofClaims", mediator = "CustomerSatisfaction", robustSE = TRUE, sims = 500)
summary(med.out)
# ADVANCED MEDIATION MODELS
# Setting up the model with multiple mediators
model <- '
# Mediation paths
CustomerSatisfaction ~ b1*NumberofClaims
IncomeLevel ~ b2*NumberofClaims
TerminationBinary ~ c1*CustomerSatisfaction + c2*IncomeLevel + c3*NumberofClaims
# Indirect effects
CustomerSatisfactionMediation := b1 * c1
IncomeLevelMediation := b2 * c2
# Total effect
TotalEffect := b1 * c1 + b2 * c2 + c3
'
fit <- sem(model, data = data, missing = "ML", estimator = "MLR", fixed.x = FALSE)
summary(fit, standardized = TRUE, fit.measures = TRUE)
# MEDIATION IN THE PRESENCE OF MODERATION
model_modmed <- '
# Moderated mediation paths
CustomerSatisfaction ~ b1*NumberofClaims + b3*GenderNumeric + b4*NumberofClaims:GenderNumeric
IncomeLevel ~ b2*NumberofClaims + b5*GenderNumeric + b6*NumberofClaims:GenderNumeric
TerminationBinary ~ c1*CustomerSatisfaction + c2*IncomeLevel + c3*NumberofClaims + c4*GenderNumeric
'
fit_modmed <- sem(model_modmed, data = data, missing = "ML", estimator = "MLR", fixed.x = FALSE)
summary(fit_modmed, standardized = TRUE, fit.measures = TRUE)
# LONGITUDINAL MEDIATION ANALYSIS
# Extending the dataset for a longitudinal perspective
data$Year <- rep(1:5, each = n/5)
# Building a simple longitudinal mediation model for demonstration
# Assuming CustomerSatisfaction as the mediator for Year 1 impact on TerminationBinary in Year 5
model_long <- '
TerminationBinary ~ a*CustomerSatisfaction + b*NumberofClaims + c*Year
CustomerSatisfaction ~ d*NumberofClaims + e*Year
'
fit_long <- growth(model_long, data = data, estimator = "MLR")
summary(fit_long, standardized = TRUE, fit.measures = TRUE)
install.packages("lavaan")
install.packages("lavaan")
# Load the libraries
library(MatchIt)
library(dplyr)
library(ggplot2)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
data <- read.csv(file = "./data/ecls.csv")
data
# Summary statistics for numeric columns
summary_statistics <- data %>%
reframe(across(where(is.numeric), ~ list(mean = mean(.x, na.rm = TRUE),
sd = sd(.x, na.rm = TRUE),
min = min(.x, na.rm = TRUE),
max = max(.x, na.rm = TRUE))))
summary_statistics
# Counts for 'race' and 'catholic' columns
race_counts <- table(data$race)
catholic_counts <- table(data$catholic)
race_counts, catholic_counts
# Install necessary packages if you haven't already
install.packages("MatchIt")
install.packages("dplyr")
install.packages("ggplot2")
# Load the libraries
library(MatchIt)
library(dplyr)
library(ggplot2)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
data <- read.csv(file = "./data/ecls.csv")
data
# Summary statistics for numeric columns
summary_statistics <- data %>%
reframe(across(where(is.numeric), ~ list(mean = mean(.x, na.rm = TRUE),
sd = sd(.x, na.rm = TRUE),
min = min(.x, na.rm = TRUE),
max = max(.x, na.rm = TRUE))))
summary_statistics
# Counts for 'race' and 'catholic' columns
race_counts <- table(data$race)
catholic_counts <- table(data$catholic)
race_counts
install.packages("dplyr")
install.packages("ggplot2")
install.packages("MatchIt")
install.packages("MatchIt")
race_counts
catholic_counts
# Histograms for numeric variables: Age of mother and father, household income, and child's math score
par(mfrow = c(2, 2))
# Mother's age distribution
ggplot(data, aes(x = p5hmage)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(title = "Distribution of Mother's Age", x = "Mother's Age", y = "Frequency") +
theme_minimal()
# Father's age distribution
ggplot(data, aes(x = p5hdage)) +
geom_histogram(binwidth = 1, fill = "gold", color = "black") +
labs(title = "Distribution of Father's Age", x = "Father's Age", y = "Frequency") +
theme_minimal()
# Household income distribution
ggplot(data, aes(x = w3income)) +
geom_histogram(fill = "lightgreen", color = "black") +
labs(title = "Distribution of Household Income", x = "Household Income", y = "Frequency") +
theme_minimal()
# Child's math score distribution
ggplot(data, aes(x = c5r2mtsc)) +
geom_histogram(fill = "salmon", color = "black") +
labs(title = "Distribution of Child's Math Score", x = "Math Score", y = "Frequency") +
theme_minimal()
# Race distribution
ggplot(data, aes(x = race)) +
geom_bar(fill = "lightblue") +
labs(title = "Distribution of Race", x = "Race", y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Catholic distribution
ggplot(data, aes(x = factor(catholic))) +
geom_bar(fill = "lightcoral") +
labs(title = "Distribution of Catholic", x = "Catholic (0 = No, 1 = Yes)", y = "Count") +
theme_minimal()
# Histograms for numeric variables: Age of mother and father, household income, and child's math score
par(mfrow = c(2, 2))
# Mother's age distribution
ggplot(data, aes(x = p5hmage)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(title = "Distribution of Mother's Age", x = "Mother's Age", y = "Frequency") +
theme_minimal()
# Father's age distribution
ggplot(data, aes(x = p5hdage)) +
geom_histogram(binwidth = 1, fill = "gold", color = "black") +
labs(title = "Distribution of Father's Age", x = "Father's Age", y = "Frequency") +
theme_minimal()
# Household income distribution
ggplot(data, aes(x = w3income)) +
geom_histogram(fill = "lightgreen", color = "black") +
labs(title = "Distribution of Household Income", x = "Household Income", y = "Frequency") +
theme_minimal()
# Child's math score distribution
ggplot(data, aes(x = c5r2mtsc)) +
geom_histogram(fill = "salmon", color = "black") +
labs(title = "Distribution of Child's Math Score", x = "Math Score", y = "Frequency") +
theme_minimal()
# Race distribution
ggplot(data, aes(x = race)) +
geom_bar(fill = "lightblue") +
labs(title = "Distribution of Race", x = "Race", y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Catholic distribution
ggplot(data, aes(x = factor(catholic))) +
geom_bar(fill = "lightcoral") +
labs(title = "Distribution of Catholic", x = "Catholic (0 = No, 1 = Yes)", y = "Count") +
theme_minimal()
# Assuming 'data' i
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
data <- read.csv(file = "./data/ecls.csv")
data
data_anonymized <- data[, !(names(data) %in% c("childid", "race", "p5hmage"))]
summary_statistics <- data_anonymized %>%
reframe(across(where(is.numeric), ~ list(mean = mean(.x, na.rm = TRUE),
sd = sd(.x, na.rm = TRUE),
min = min(.x, na.rm = TRUE),
max = max(.x, na.rm = TRUE))))
summary_statistics
# Counts for 'race' and 'catholic' columns
race_counts <- table(data$race)
catholic_counts <- table(data$catholic)
race_counts
catholic_counts
race_counts
Counts for 'race' and 'catholic' columns
catholic_counts <- table(data_anonymized$catholic)
catholic_counts
ggplot(data_anonymized, aes(x = p5hmage)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(title = "Distribution of Mother's Age", x = "Mother's Age", y = "Frequency") +
theme_minimal()
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
data <- read.csv(file = "./data/ecls.csv")
data
# Remove the any columns to anonymize the data
data_anonymized <- data[, !(names(data) %in% c("childid"))]
# Summary statistics for numeric columns
summary_statistics <- data_anonymized %>%
reframe(across(where(is.numeric), ~ list(mean = mean(.x, na.rm = TRUE),
sd = sd(.x, na.rm = TRUE),
min = min(.x, na.rm = TRUE),
max = max(.x, na.rm = TRUE))))
summary_statistics
# Counts  'catholic' columns
catholic_counts <- table(data_anonymized$catholic)
catholic_counts
# Histograms for numeric variables: Age of mother and father, household income, and child's math score
par(mfrow = c(2, 2))
# Mother's age distribution
ggplot(data_anonymized, aes(x = p5hmage)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(title = "Distribution of Mother's Age", x = "Mother's Age", y = "Frequency") +
theme_minimal()
# Install necessary packages if you haven't already
install.packages("MatchIt")
install.packages("dplyr")
install.packages("ggplot2")
# Load the libraries
library(MatchIt)
library(dplyr)
library(ggplot2)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
data <- read.csv(file = "./data/ecls.csv")
data
# Remove the any columns to anonymize the data
data_anonymized <- data[, !(names(data) %in% c("childid"))]
# Summary statistics for numeric columns
summary_statistics <- data_anonymized %>%
reframe(across(where(is.numeric), ~ list(mean = mean(.x, na.rm = TRUE),
sd = sd(.x, na.rm = TRUE),
min = min(.x, na.rm = TRUE),
max = max(.x, na.rm = TRUE))))
summary_statistics
# Counts  'catholic' columns
catholic_counts <- table(data_anonymized$catholic)
catholic_counts
# Histograms for numeric variables: Age of mother and father, household income, and child's math score
par(mfrow = c(2, 2))
# Mother's age distribution
ggplot(data_anonymized, aes(x = p5hmage)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(title = "Distribution of Mother's Age", x = "Mother's Age", y = "Frequency") +
theme_minimal()
# Father's age distribution
ggplot(data_anonymized, aes(x = p5hdage)) +
geom_histogram(binwidth = 1, fill = "gold", color = "black") +
labs(title = "Distribution of Father's Age", x = "Father's Age", y = "Frequency") +
theme_minimal()
# Household income distribution
ggplot(data_anonymized, aes(x = w3income)) +
geom_histogram(fill = "lightgreen", color = "black") +
labs(title = "Distribution of Household Income", x = "Household Income", y = "Frequency") +
theme_minimal()
# Child's math score distribution
ggplot(data_anonymized, aes(x = c5r2mtsc)) +
geom_histogram(fill = "salmon", color = "black") +
labs(title = "Distribution of Child's Math Score", x = "Math Score", y = "Frequency") +
theme_minimal()
# Race distribution
ggplot(data_anonymized, aes(x = race)) +
geom_bar(fill = "lightblue") +
labs(title = "Distribution of Race", x = "Race", y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Catholic distribution
ggplot(data_anonymized, aes(x = factor(catholic))) +
geom_bar(fill = "lightcoral") +
labs(title = "Distribution of Catholic", x = "Catholic (0 = No, 1 = Yes)", y = "Count") +
theme_minimal()
# View the first few rows of the anonymized dataframe
head(data_anonymized)
data_anonymized %>%
group_by(catholic) %>%
summarise(n_students = n(),
mean_math = mean(c5r2mtsc_std, na.rm = TRUE),
std_error = sd(c5r2mtsc_std, na.rm = TRUE) / sqrt(n_students))
pre_treatment_covariates <- c('race_white', 'w3income', 'p5numpla', 'w3momed_hsb')
data_anonymized %>%
group_by(catholic) %>%
summarise_at(vars(one_of(pre_treatment_covariates)), ~mean(.x, na.rm = TRUE))
# build the model and update prop score
model_ps <- glm(catholic ~ race_white + w3income + p5numpla + w3momed_hsb, family = binomial(), data = data_anonymized)
data_anonymized$pscore <- predict(model_ps, newdata = data_anonymized, type = "response")
#plot the results as a histogram
ggplot(data_anonymized, aes(x = pscore, fill = as.factor(catholic))) +
geom_histogram(alpha = 0.6, position = "identity", bins = 30) +
labs(x = "Propensity Score", y = "Frequency", fill = "Group") +
theme_minimal()
# Remove rows with any NA values in the specified covariates
data_cleaned <- data_anonymized %>%
filter(complete.cases(catholic, race_white, w3income, p5numpla, w3momed_hsb))
# Further remove rows with non-finite values in numeric covariates
numeric_covariates <- c( "w3income", "p5numpla")
data_cleaned <- data_cleaned %>%
filter(sapply(data_cleaned[numeric_covariates], is.finite) %>% rowSums() == length(numeric_covariates))
# run matchit() on data_cleaned
mod_match <- matchit(catholic ~ race_white + w3income + p5numpla + w3momed_hsb,
method = "nearest", data = data_cleaned) # or data_imputed
# Using the MatchIt package for visualization
plot(mod_match, type = "jitter")
plot(mod_match, type = "hist")
matched_data <- match.data(mod_match)
matched_data %>%
group_by(catholic) %>%
summarise_at(vars(one_of(pre_treatment_covariates)), ~mean(.x, na.rm = TRUE))
with(matched_data, t.test(c5r2mtsc_std ~ catholic))
# You can also use a linear model for a more detailed analysis
lm_effect <- lm(c5r2mtsc_std ~ catholic, data = matched_data)
summary(lm_effect)
install.packages("dplyr")
install.packages("ggplot2")
install.packages("MatchIt")
install.packages("ggplot2")
install.packages("MatchIt")
install.packages("MatchIt")
# Using the MatchIt package for visualization
plot(mod_match, type = "jitter")
